/*ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ
reduce 사용할때 초깃값 꼭 확인하고 return 빼먹지 말기!
ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ*/

let arry = [1,2,3,4];

arry.reduce((a,c) => a+c, 0);
//a는 누적값 c는 현재값 0은 초기값
/*
코드 진행 단계
a : 0 // c : 1
a : 1 // c : 2
a : 3 // c : 3
a : 6 // c : 4
최종 반환되는 값은 a + c = 10입니다.
*/

arry.reduce((a,c) => a*c, 1);
/*
a : 1 // c :1
a : 1 // c : 2
a : 2 // c : 3
a : 6 //c : 4
최종 반환되는 값은 a * c = 24입니다.
*/

arry.reduce((a,c) => a+c);
//초기값이 없다면 배열의 index 0을 가진 값이 초기값이다.
//초기값이 있는지 없는지 잘 확인해봐야한다.
/*
a : 1 // c : 2 << 첫번째 값을 초기값으로 사용했기 때문에 두번째 값이 현재값이 된다.
a : 3 // c : 3
a : 6 // c : 4
최종 반환되는 값은 a + c = 10입니다.
*/


//reduce를 이용해서 배열을 객체로 만들기
["애플", "마소", "테슬라"].reduce((a,c,i) =>{a[i] = c; return a},{});
/*
a : {} // c : "애플" // i : 0
a : {0 : "애플"} // c : 마소 // i : 1
a : {0 : "애플", 1 : "마소"} // c : 테슬라 // i : 2
최종 반환되는 값은 : a : {0 : "애플", 1 : "마소", 3 : "테슬라"}

*/