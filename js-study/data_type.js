/***********************************************
원시(기본) 데이터 타입

숫자, 문자열, 불리언(true/false),null,undefined
그 외 것들은 객체(참조) 데이터 타입니다.
***********************************************/
let a = "js300";
console.log(str.length); // 결과값 : 6
console.log(str.charAt(0)); // 결과값 : "j"
//분명 a는 문자열로 원시 데이터 타입이지만 어떤 작업을 할때 
//javascript는 임시객체(wrapper object - 레퍼 객체)를 만들고 사용 후 제거한다.

/**************************************
원시 data type      wrapper object
숫자            =>   Number
문자열          =>   String
불리언          =>   Boolean
null            =>   x
undefined       =>   x
**************************************/

//참조와 복제

let z = 1;
let x = z;
x = 2;
console.log(z); // 결과값 : 1
/*******************************************************
당연한 결과지만 이걸 설명해야한다면
1. z라는 폴더안에 1이라는 파일있다.
2. z라는 폴더를 복사 붙여넣기 후 이름을 x라고 변경한다.
3. x라는 폴더안에 있는 1이라는 파일을 2로 바꾼다.
4. z라는 폴더안에 있는 1은 변하지 않는다.
>> 이러한 과정을 복제 라고 한다.
>> 원시 데이터이기 때문에 가능한 일이다!!!!!!!!!!!!!!!!!
*******************************************************/

//case 1
let y = {"id" : 1};
let n = a;
n.id = 2;
console.log(y.id); //결과값 : 2
/*******************************************************
1. let y -> {"id" : 1} <- let n
1-1. 두 변수는 같은 객체를 바라보고 있다.
2. 어느 한쪽에서라도 객체를 변경하면 동일하게 적용된다.
>> 이러한 과정을 참조라고 한다.
*******************************************************/

//case 2
let u = {"id" : 1};
let i = u;
i = {"id" : 2};
console.log(u.id); // 결과값 : 1
/*******************************************************
1. let u -> {"id" : 1} <- let i
2. let i에 새로운 객체를 생성하였습니다.
2-1. let u -> {"id" : 1}
2-2. let i -> {"id" : 2}
3. 이제 서로 다른 객체를 바라보고 있다.
*******************************************************/

//함수와 참조

let aa = 1;
function func(bb){
    b = 2;
}
func(aa);
console.log(aa); // 결과값 : 1
/*******************************************************
1. aa = 1
2. bb = aa
3. bb = 2
>> 원시 데이터 타입이므로 복제가 된다.
*******************************************************/

let cc = {"id" : 1};
function lala(dd){
    dd = {"id" : 2};
}
lala(cc);
console.log(cc.id); //결과값 : 1
/*******************************************************
1. cc = {"id" : 1}
2. dd = cc >> 두개 모두 {"id" : 1}을 바라본다.
3. dd = {"id" : 2} >> 새로운 객체를 생성한다.
3-1. 이제 서로 다른 객체를 바라본다.
*******************************************************/

let gg = {"id" : 1};
function hoho(kk){
    kk.id = 2;
}

hoho(gg);
console.log(gg.id); //결과값 : 2
/*******************************************************
1. gg = {"id" : 1}
2. kk = gg >> 두개 모두 {"id" : 1}을 바라본다.
3. kk.id = 2로 변경
4. 3번의 과정으로 그 속성이 소속된 객체가 수정되었습니다.
5. kk,gg 모두에게 영향을 미치게 된다.
*******************************************************/